<?php
// @formatter:off

$chartId = $id;
$chartVar = 'chart_' . $chartId;
?>

<div id="<?= $chartId ?>" class="chart <?= $class ?> <?= $type ?>">
    <div class="chart-heading">
        <h2 class="chart-title"><?= $this->__($title) ?></h2>
    </div>
    <div class="chart-body">
        <div class="canvas-container">
            <div class="loading-anim"></div>
            <canvas width="<?= $width ?>" height="<?= $height ?>"></canvas>
        </div>
        <div class="toolbar">
            <form action="javascript:void(0)" id="<?= $chartId ?>_form">
                <ul>
                    <?php foreach ($filters as $filterElement): /* @var $filterElement \app\models\core\Form\Element\AbstractElement */ ?>
                        <li>
                            <span class="filter-label"><?= $this->__($filterElement->getLabel()) ?></span>
                            <div class="filter-input">
                                <?= $filterElement->toHtml() ?>
                            </div>
                        </li>
                    <?php endforeach; ?>
                </ul>
            </form>
        </div>
        <?php if ($show_legend): ?>
            <div id="<?= $chartId ?>-legend-container" class="legend"></div>
        <?php endif; ?>

        <script>
            window.addEventListener('DOMContentLoaded', function() {
                (function($) {
                    const getOrCreateLegendList = (chart, id) => {
                        const legendContainer = document.getElementById(id);
                        let listContainer = legendContainer.querySelector('ul');

                        if (!listContainer) {
                            listContainer = document.createElement('ul');
                            listContainer.className = 'doughnut-legend';

                            legendContainer.appendChild(listContainer);
                        }

                        return listContainer;
                    };

                    const htmlLegendPlugin = {
                        id: 'htmlLegend',
                        afterUpdate(chart, args, options) {
                            const ul = getOrCreateLegendList(chart, options.containerID);

                            // Remove old legend items
                            while (ul.firstChild) {
                                ul.firstChild.remove();
                            }

                            if (!chart.data?.datasets.length) {
                                return;
                            }
                            // Reuse the built-in legendItems generator
                            const items = chart.options.plugins.legend.labels.generateLabels(chart);

                            items.forEach(item => {
                                const li = document.createElement('li');
                                li.style.cursor = 'pointer';

                                li.onclick = () => {
                                    const {type} = chart.config;
                                    if (type === 'pie' || type === 'doughnut') {
                                        // Pie and doughnut charts only have a single dataset and visibility is per item
                                        chart.toggleDataVisibility(item.index);
                                    } else {
                                        chart.setDatasetVisibility(item.datasetIndex, !chart.isDatasetVisible(item.datasetIndex));
                                    }
                                    chart.update();
                                };

                                // Color box
                                const boxSpan = document.createElement('span');
                                boxSpan.style.background = item.fillStyle;
                                boxSpan.style.borderColor = item.strokeStyle;
                                boxSpan.style.borderWidth = item.lineWidth + 'px';
                                boxSpan.style.display = 'inline-block';
                                boxSpan.style.flexShrink = 0;
                                boxSpan.style.height = '20px';
                                boxSpan.style.marginRight = '10px';
                                boxSpan.style.width = '20px';
                                boxSpan.className = 'label-color';

                                // Text
                                const textContainer = document.createElement('span');
                                textContainer.style.color = item.fontColor;
                                textContainer.style.margin = 0;
                                textContainer.style.padding = 0;
                                textContainer.style.textDecoration = item.hidden ? 'line-through' : '';
                                textContainer.className = 'label-text';

                                const text = document.createTextNode(item.text);
                                textContainer.appendChild(text);

                                li.appendChild(boxSpan);
                                li.appendChild(textContainer);
                                ul.appendChild(li);
                            });
                        }
                    };

                    const chart = new Chart($('#<?= $chartId ?> canvas').get(0), {
                        type: 'doughnut',
                        options: {
                            animation: false,
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                htmlLegend: {
                                    containerID: '<?= $chartId ?>-legend-container',
                                },
                                legend: {
                                    display: false,
                                }
                            },
                        },
                        plugins: [htmlLegendPlugin],
                    });

                    function updateChart() {
                        chart.clear();

                        $('#<?= $chartId ?> .loading-anim').show();

                        var filters = $('#<?= $chartId ?>_form').serialize();
                        $.getJSON("<?= $data_url ?>", filters, function(data) {
                            $('#<?= $chartId ?> .loading-anim').hide();
                            $('#<?= $chartId ?> .no-data-message').remove();

                            whbChartjs.populateDoughnutChartWithData(chart, data);

                            chart.update();
                        });
                    }

                    $(window).load(function() {
                        updateChart();
                        $('#<?= $chartId ?> .toolbar .filter-input').change(updateChart);
                    });
                })(jQuery);
            });
        </script>
        <?php if ($footer_note): ?>
            <div class="chart-footer right">
                <p><?= $footer_note ?></p>
            </div>
        <?php endif; ?>
    </div>
</div>
